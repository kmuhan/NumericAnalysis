# -*- coding: utf-8 -*-
"""Tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9FzxfjYulEgUoAS6QK03okG2-uBNt4I

라이브러리 다운로드
"""

!pip install -q tensorflow-gpu==2.0.0-rc1
!pip install unidecode

"""데이터 입력"""

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import unidecode
import math
import time

from google.colab import drive
drive.mount("/content/drive")

def MSE(y, pred):
  return np.mean(np.square(y - pred))

filepath = '/content/drive/My Drive/Colab Notebooks/data/data6_max_avg.txt'

weight = []
longevity = []

with open(filepath, 'r') as file:
    for line in file:
        p = line.strip('\n')
        weight.append(math.log10(float(eval(p)['weight'])))
        longevity.append(math.log10(float(eval(p)['longevity'])))

w_learn = weight[:400]
l_learn = longevity[:400]

"""Tensorflow 변수 준비"""

W = tf.Variable(tf.random_uniform([1], -5.0, 5.0))
b = tf.Variable(tf.zeros([1]))
y = W * w_learn + b

cost = tf.reduce_mean(tf.square(y - l_learn))

learning_rate = 0.1
learning_steps = 150

optimizer = tf.train.GradientDescentOptimizer(learning_rate)
train = optimizer.minimize(cost)

"""알고리즘 실행 부분"""

init = tf.global_variables_initializer()

sess = tf.Session()
sess.run(init)

time_elapsed = 0

for step in range(learning_steps):
   tic = time.perf_counter()

   sess.run(train)
   
   toc = time.perf_counter()
   time_elapsed += (toc - tic)
  #  print(step + 1, sess.run(cost))

plt.scatter(w_learn, l_learn, label='original data')
plt.plot(weight, sess.run(W) * weight + sess.run(b), 'r-', label='fitted line')
plt.plot(weight[400:], longevity[400:], 'o', color='orange', label='test data')
plt.xlabel('log_{10}(weight)')
plt.ylabel('log_{10}(longevity)')
plt.grid()
plt.title('Tensorflow train')
plt.legend()

plt.show()
print(f'y =  {sess.run(W)}x + {sess.run(b)}')
print(f'MSE = {MSE(longevity[400:], sess.run(W)*weight[400:]+sess.run(b))}, Elapsed time = {time_elapsed * 1000} milliseconds, {learning_rate} learning rate, {learning_steps} Iterations')